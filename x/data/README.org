#+TITLE: Data Module
*STATUS: PARTIAL*
* Overview
  :PROPERTIES:
  :CUSTOM_ID: overview
  :END:

This module provides very basic support for hashing and time-stamping data onto
the blockchain. It serves the purpose of providing a way that any piece of data
can be tracked onto the blockchain for a fee and known to have existed at or
before some given block-height. It is intended that this module will mostly
be supplanted by other more domain specific functionality and/or
enhanced with robust, opt-in schema-validation support in the future.

* Requirements
  :PROPERTIES:
  :CUSTOM_ID: requirements
  :END:

- It should be possible to store arbitrary data on the blockchain for a fee
- It should be possible to track arbitrary off-chain data by hash on the blockchain, thus generating a proof of timestamp
- On-chain and off-chain data should be available in the index available to oracles
- There must be a robust way for dealing with hash collisions, especially with respect to off-chain data whose content is opaque

* Transaction Messages and Types
#+BEGIN_SRC go :tangle types.go :comments link :exports none
// DO NOT EDIT THIS FILE
  package data
#+END_SRC
  
#+BEGIN_SRC go :tangle types.go :comments link
  type DataFormat int

  const (
    Unknown DataFormat = 0
    NQuads DataFormat  = 1
    JSON_LD DataFormat = 2
    JSON DataFormat    = 3
    Turtle DataFormat  = 4
    TRIG DataFormat    = 5
  )

  type HashAlgorithm int

  const (
    BLAKE2B_256 HashAlgorithm = 0
    SHA256 HashAlgorithm = 1
    URDNA2015 HashAlgorithm = 2
    URGNA2012 HashAlgorithm = 3
  )

  type MsgStoreData struct {
    Data []byte `json:"data"`
    Format DataFormat `json:"format,omitempty"`
  }

  type MsgStoreGraph struct {
    NQuads string `json:"nquads"`
    URDNA2015Hash []byte `json:"urdna2015_hash"`
	  Signers []sdk.AccAddress `json:"signers"`
  }

  type MsgTrackData struct {
    Hash []byte `json:"hash"`
    Algorithm HashAlgorithm `json:"algorithm"`
    Format DataFormat `json:"format,omitempty"`
    Url string `json:"url,omitempty"`
  }
#+END_SRC

** TODO should data format (i.e. JSON/JSON-LD/etc.) and/or schema (i.e. SCHACL/SHEX/JSON-SCHEMA) be tracked and/or verified on-chain?
    It might be useful to track format on-chain but not verify it. For a given format there could be multiple schemas that it satisfies. My current thoughts are that this is a type of verification/validation that can be done off chain and there can be on-chain attestations about that - ARC.

* Queries and Indexing
