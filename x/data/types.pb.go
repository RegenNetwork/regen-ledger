// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/data/v1alpha2/types.proto

package data

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MediaType defines MIME media types to be used with ID_TYPE_RAW_UNSPECIFIED.
type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNSPECIFIED MediaType = 0
	// basic formats
	MediaType_MEDIA_TYPE_TEXT_PLAIN   MediaType = 1
	MediaType_MEDIA_TYPE_JSON         MediaType = 2
	MediaType_MEDIA_TYPE_CSV          MediaType = 3
	MediaType_MEDIA_TYPE_XML          MediaType = 4
	MediaType_MEDIA_TYPE_PROTOBUF_ANY MediaType = 5
	MediaType_MEDIA_TYPE_PDF          MediaType = 6
	// images
	MediaType_MEDIA_TYPE_TIFF MediaType = 16
	MediaType_MEDIA_TYPE_JPG  MediaType = 17
	MediaType_MEDIA_TYPE_PNG  MediaType = 18
	MediaType_MEDIA_TYPE_SVG  MediaType = 19
	MediaType_MEDIA_TYPE_WEBP MediaType = 20
	MediaType_MEDIA_TYPE_AVIF MediaType = 21
	MediaType_MEDIA_TYPE_GIF  MediaType = 22
	MediaType_MEDIA_TYPE_APNG MediaType = 23
	// audio-visual media containers
	MediaType_MEDIA_TYPE_MPEG MediaType = 32
	MediaType_MEDIA_TYPE_MP4  MediaType = 33
	MediaType_MEDIA_TYPE_WEBM MediaType = 34
	MediaType_MEDIA_TYPE_OGG  MediaType = 35
)

var MediaType_name = map[int32]string{
	0:  "MEDIA_TYPE_UNSPECIFIED",
	1:  "MEDIA_TYPE_TEXT_PLAIN",
	2:  "MEDIA_TYPE_JSON",
	3:  "MEDIA_TYPE_CSV",
	4:  "MEDIA_TYPE_XML",
	5:  "MEDIA_TYPE_PROTOBUF_ANY",
	6:  "MEDIA_TYPE_PDF",
	16: "MEDIA_TYPE_TIFF",
	17: "MEDIA_TYPE_JPG",
	18: "MEDIA_TYPE_PNG",
	19: "MEDIA_TYPE_SVG",
	20: "MEDIA_TYPE_WEBP",
	21: "MEDIA_TYPE_AVIF",
	22: "MEDIA_TYPE_GIF",
	23: "MEDIA_TYPE_APNG",
	32: "MEDIA_TYPE_MPEG",
	33: "MEDIA_TYPE_MP4",
	34: "MEDIA_TYPE_WEBM",
	35: "MEDIA_TYPE_OGG",
}

var MediaType_value = map[string]int32{
	"MEDIA_TYPE_UNSPECIFIED":  0,
	"MEDIA_TYPE_TEXT_PLAIN":   1,
	"MEDIA_TYPE_JSON":         2,
	"MEDIA_TYPE_CSV":          3,
	"MEDIA_TYPE_XML":          4,
	"MEDIA_TYPE_PROTOBUF_ANY": 5,
	"MEDIA_TYPE_PDF":          6,
	"MEDIA_TYPE_TIFF":         16,
	"MEDIA_TYPE_JPG":          17,
	"MEDIA_TYPE_PNG":          18,
	"MEDIA_TYPE_SVG":          19,
	"MEDIA_TYPE_WEBP":         20,
	"MEDIA_TYPE_AVIF":         21,
	"MEDIA_TYPE_GIF":          22,
	"MEDIA_TYPE_APNG":         23,
	"MEDIA_TYPE_MPEG":         32,
	"MEDIA_TYPE_MP4":          33,
	"MEDIA_TYPE_WEBM":         34,
	"MEDIA_TYPE_OGG":          35,
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}

func (MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{0}
}

type GraphCanonicalizationAlgorithm int32

const (
	GraphCanonicalizationAlgorithm_GRAPH_CANONICALIZATION_ALGORITHM_UNSPECIFIED GraphCanonicalizationAlgorithm = 0
	GraphCanonicalizationAlgorithm_GRAPH_CANONICALIZATION_ALGORITHM_URDNA2015   GraphCanonicalizationAlgorithm = 1
)

var GraphCanonicalizationAlgorithm_name = map[int32]string{
	0: "GRAPH_CANONICALIZATION_ALGORITHM_UNSPECIFIED",
	1: "GRAPH_CANONICALIZATION_ALGORITHM_URDNA2015",
}

var GraphCanonicalizationAlgorithm_value = map[string]int32{
	"GRAPH_CANONICALIZATION_ALGORITHM_UNSPECIFIED": 0,
	"GRAPH_CANONICALIZATION_ALGORITHM_URDNA2015":   1,
}

func (x GraphCanonicalizationAlgorithm) String() string {
	return proto.EnumName(GraphCanonicalizationAlgorithm_name, int32(x))
}

func (GraphCanonicalizationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{1}
}

type GraphMerkleTree int32

const (
	GraphMerkleTree_GRAPH_MERKLE_TREE_NONE_UNSPECIFIED GraphMerkleTree = 0
)

var GraphMerkleTree_name = map[int32]string{
	0: "GRAPH_MERKLE_TREE_NONE_UNSPECIFIED",
}

var GraphMerkleTree_value = map[string]int32{
	"GRAPH_MERKLE_TREE_NONE_UNSPECIFIED": 0,
}

func (x GraphMerkleTree) String() string {
	return proto.EnumName(GraphMerkleTree_name, int32(x))
}

func (GraphMerkleTree) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{2}
}

type DigestAlgorithm int32

const (
	DigestAlgorithm_DIGEST_ALGORITHM_UNSPECIFIED DigestAlgorithm = 0
	DigestAlgorithm_DIGEST_ALGORITHM_BLAKE2B_256 DigestAlgorithm = 1
)

var DigestAlgorithm_name = map[int32]string{
	0: "DIGEST_ALGORITHM_UNSPECIFIED",
	1: "DIGEST_ALGORITHM_BLAKE2B_256",
}

var DigestAlgorithm_value = map[string]int32{
	"DIGEST_ALGORITHM_UNSPECIFIED": 0,
	"DIGEST_ALGORITHM_BLAKE2B_256": 1,
}

func (x DigestAlgorithm) String() string {
	return proto.EnumName(DigestAlgorithm_name, int32(x))
}

func (DigestAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{3}
}

// ContentID specifies a hash based content identifier for a piece of data
type ContentHash struct {
	// Types that are valid to be assigned to Descriptor_:
	//	*ContentHash_Raw_
	//	*ContentHash_Graph_
	Descriptor_ isContentHash_Descriptor_ `protobuf_oneof:"descriptor"`
}

func (m *ContentHash) Reset()         { *m = ContentHash{} }
func (m *ContentHash) String() string { return proto.CompactTextString(m) }
func (*ContentHash) ProtoMessage()    {}
func (*ContentHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{0}
}
func (m *ContentHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentHash.Merge(m, src)
}
func (m *ContentHash) XXX_Size() int {
	return m.Size()
}
func (m *ContentHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentHash.DiscardUnknown(m)
}

var xxx_messageInfo_ContentHash proto.InternalMessageInfo

type isContentHash_Descriptor_ interface {
	isContentHash_Descriptor_()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ContentHash_Raw_ struct {
	Raw *ContentHash_Raw `protobuf:"bytes,1,opt,name=raw,proto3,oneof" json:"raw,omitempty"`
}
type ContentHash_Graph_ struct {
	Graph *ContentHash_Graph `protobuf:"bytes,2,opt,name=graph,proto3,oneof" json:"graph,omitempty"`
}

func (*ContentHash_Raw_) isContentHash_Descriptor_()   {}
func (*ContentHash_Graph_) isContentHash_Descriptor_() {}

func (m *ContentHash) GetDescriptor_() isContentHash_Descriptor_ {
	if m != nil {
		return m.Descriptor_
	}
	return nil
}

func (m *ContentHash) GetRaw() *ContentHash_Raw {
	if x, ok := m.GetDescriptor_().(*ContentHash_Raw_); ok {
		return x.Raw
	}
	return nil
}

func (m *ContentHash) GetGraph() *ContentHash_Graph {
	if x, ok := m.GetDescriptor_().(*ContentHash_Graph_); ok {
		return x.Graph
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContentHash) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContentHash_Raw_)(nil),
		(*ContentHash_Graph_)(nil),
	}
}

type ContentHash_Raw struct {
	// hash represents the hash of the data based on the specified digest_algorithm
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// digest_algorithm represents the hash digest algorithm.
	DigestAlgorithm DigestAlgorithm `protobuf:"varint,2,opt,name=digest_algorithm,json=digestAlgorithm,proto3,enum=regen.data.v1alpha2.DigestAlgorithm" json:"digest_algorithm,omitempty"`
	// media_type represents the MediaType for raw data.
	MediaType MediaType `protobuf:"varint,3,opt,name=media_type,json=mediaType,proto3,enum=regen.data.v1alpha2.MediaType" json:"media_type,omitempty"`
}

func (m *ContentHash_Raw) Reset()         { *m = ContentHash_Raw{} }
func (m *ContentHash_Raw) String() string { return proto.CompactTextString(m) }
func (*ContentHash_Raw) ProtoMessage()    {}
func (*ContentHash_Raw) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{0, 0}
}
func (m *ContentHash_Raw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentHash_Raw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentHash_Raw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentHash_Raw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentHash_Raw.Merge(m, src)
}
func (m *ContentHash_Raw) XXX_Size() int {
	return m.Size()
}
func (m *ContentHash_Raw) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentHash_Raw.DiscardUnknown(m)
}

var xxx_messageInfo_ContentHash_Raw proto.InternalMessageInfo

func (m *ContentHash_Raw) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ContentHash_Raw) GetDigestAlgorithm() DigestAlgorithm {
	if m != nil {
		return m.DigestAlgorithm
	}
	return DigestAlgorithm_DIGEST_ALGORITHM_UNSPECIFIED
}

func (m *ContentHash_Raw) GetMediaType() MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

type ContentHash_Graph struct {
	// hash represents the hash of the data based on the specified digest_algorithm
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// digest_algorithm represents the hash digest algorithm.
	DigestAlgorithm DigestAlgorithm `protobuf:"varint,2,opt,name=digest_algorithm,json=digestAlgorithm,proto3,enum=regen.data.v1alpha2.DigestAlgorithm" json:"digest_algorithm,omitempty"`
	// graph_canonicalization_algorithm represents the RDF graph canonicalization algorithm. It should
	// be left unset if type is not ID_TYPE_GRAPH.
	CanonicalizationAlgorithm GraphCanonicalizationAlgorithm `protobuf:"varint,3,opt,name=canonicalization_algorithm,json=canonicalizationAlgorithm,proto3,enum=regen.data.v1alpha2.GraphCanonicalizationAlgorithm" json:"canonicalization_algorithm,omitempty"`
	MerkleTree                GraphMerkleTree                `protobuf:"varint,4,opt,name=merkle_tree,json=merkleTree,proto3,enum=regen.data.v1alpha2.GraphMerkleTree" json:"merkle_tree,omitempty"`
}

func (m *ContentHash_Graph) Reset()         { *m = ContentHash_Graph{} }
func (m *ContentHash_Graph) String() string { return proto.CompactTextString(m) }
func (*ContentHash_Graph) ProtoMessage()    {}
func (*ContentHash_Graph) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{0, 1}
}
func (m *ContentHash_Graph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentHash_Graph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentHash_Graph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentHash_Graph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentHash_Graph.Merge(m, src)
}
func (m *ContentHash_Graph) XXX_Size() int {
	return m.Size()
}
func (m *ContentHash_Graph) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentHash_Graph.DiscardUnknown(m)
}

var xxx_messageInfo_ContentHash_Graph proto.InternalMessageInfo

func (m *ContentHash_Graph) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ContentHash_Graph) GetDigestAlgorithm() DigestAlgorithm {
	if m != nil {
		return m.DigestAlgorithm
	}
	return DigestAlgorithm_DIGEST_ALGORITHM_UNSPECIFIED
}

func (m *ContentHash_Graph) GetCanonicalizationAlgorithm() GraphCanonicalizationAlgorithm {
	if m != nil {
		return m.CanonicalizationAlgorithm
	}
	return GraphCanonicalizationAlgorithm_GRAPH_CANONICALIZATION_ALGORITHM_UNSPECIFIED
}

func (m *ContentHash_Graph) GetMerkleTree() GraphMerkleTree {
	if m != nil {
		return m.MerkleTree
	}
	return GraphMerkleTree_GRAPH_MERKLE_TREE_NONE_UNSPECIFIED
}

type ContentEntry struct {
	Hash      *ContentHash                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Iri       string                      `protobuf:"bytes,2,opt,name=iri,proto3" json:"iri,omitempty"`
	Content   *ContentEntry_Content       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp *types.Timestamp            `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signers   []*ContentEntry_SignerEntry `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *ContentEntry) Reset()         { *m = ContentEntry{} }
func (m *ContentEntry) String() string { return proto.CompactTextString(m) }
func (*ContentEntry) ProtoMessage()    {}
func (*ContentEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{1}
}
func (m *ContentEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentEntry.Merge(m, src)
}
func (m *ContentEntry) XXX_Size() int {
	return m.Size()
}
func (m *ContentEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ContentEntry proto.InternalMessageInfo

func (m *ContentEntry) GetHash() *ContentHash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ContentEntry) GetIri() string {
	if m != nil {
		return m.Iri
	}
	return ""
}

func (m *ContentEntry) GetContent() *ContentEntry_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ContentEntry) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ContentEntry) GetSigners() []*ContentEntry_SignerEntry {
	if m != nil {
		return m.Signers
	}
	return nil
}

type ContentEntry_Content struct {
	// Types that are valid to be assigned to Sum:
	//	*ContentEntry_Content_RawData
	Sum isContentEntry_Content_Sum `protobuf_oneof:"sum"`
}

func (m *ContentEntry_Content) Reset()         { *m = ContentEntry_Content{} }
func (m *ContentEntry_Content) String() string { return proto.CompactTextString(m) }
func (*ContentEntry_Content) ProtoMessage()    {}
func (*ContentEntry_Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{1, 0}
}
func (m *ContentEntry_Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentEntry_Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentEntry_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentEntry_Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentEntry_Content.Merge(m, src)
}
func (m *ContentEntry_Content) XXX_Size() int {
	return m.Size()
}
func (m *ContentEntry_Content) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentEntry_Content.DiscardUnknown(m)
}

var xxx_messageInfo_ContentEntry_Content proto.InternalMessageInfo

type isContentEntry_Content_Sum interface {
	isContentEntry_Content_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ContentEntry_Content_RawData struct {
	RawData []byte `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3,oneof" json:"raw_data,omitempty"`
}

func (*ContentEntry_Content_RawData) isContentEntry_Content_Sum() {}

func (m *ContentEntry_Content) GetSum() isContentEntry_Content_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ContentEntry_Content) GetRawData() []byte {
	if x, ok := m.GetSum().(*ContentEntry_Content_RawData); ok {
		return x.RawData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContentEntry_Content) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContentEntry_Content_RawData)(nil),
	}
}

type ContentEntry_SignerEntry struct {
	Signer    string           `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Timestamp *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ContentEntry_SignerEntry) Reset()         { *m = ContentEntry_SignerEntry{} }
func (m *ContentEntry_SignerEntry) String() string { return proto.CompactTextString(m) }
func (*ContentEntry_SignerEntry) ProtoMessage()    {}
func (*ContentEntry_SignerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68eefb44eeab1df, []int{1, 1}
}
func (m *ContentEntry_SignerEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentEntry_SignerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentEntry_SignerEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentEntry_SignerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentEntry_SignerEntry.Merge(m, src)
}
func (m *ContentEntry_SignerEntry) XXX_Size() int {
	return m.Size()
}
func (m *ContentEntry_SignerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentEntry_SignerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ContentEntry_SignerEntry proto.InternalMessageInfo

func (m *ContentEntry_SignerEntry) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *ContentEntry_SignerEntry) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterEnum("regen.data.v1alpha2.MediaType", MediaType_name, MediaType_value)
	proto.RegisterEnum("regen.data.v1alpha2.GraphCanonicalizationAlgorithm", GraphCanonicalizationAlgorithm_name, GraphCanonicalizationAlgorithm_value)
	proto.RegisterEnum("regen.data.v1alpha2.GraphMerkleTree", GraphMerkleTree_name, GraphMerkleTree_value)
	proto.RegisterEnum("regen.data.v1alpha2.DigestAlgorithm", DigestAlgorithm_name, DigestAlgorithm_value)
	proto.RegisterType((*ContentHash)(nil), "regen.data.v1alpha2.ContentHash")
	proto.RegisterType((*ContentHash_Raw)(nil), "regen.data.v1alpha2.ContentHash.Raw")
	proto.RegisterType((*ContentHash_Graph)(nil), "regen.data.v1alpha2.ContentHash.Graph")
	proto.RegisterType((*ContentEntry)(nil), "regen.data.v1alpha2.ContentEntry")
	proto.RegisterType((*ContentEntry_Content)(nil), "regen.data.v1alpha2.ContentEntry.Content")
	proto.RegisterType((*ContentEntry_SignerEntry)(nil), "regen.data.v1alpha2.ContentEntry.SignerEntry")
}

func init() { proto.RegisterFile("regen/data/v1alpha2/types.proto", fileDescriptor_e68eefb44eeab1df) }

var fileDescriptor_e68eefb44eeab1df = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcf, 0x73, 0xda, 0x46,
	0x14, 0xc7, 0x91, 0x31, 0x76, 0x79, 0x78, 0xe2, 0xed, 0xba, 0x71, 0x08, 0xe9, 0x10, 0xea, 0x76,
	0x32, 0x29, 0x13, 0x8b, 0x84, 0x24, 0x9d, 0xf4, 0xd0, 0xce, 0x08, 0x10, 0x42, 0x09, 0x08, 0xcd,
	0x22, 0xbb, 0x49, 0x2e, 0x9a, 0x35, 0x6c, 0x85, 0x26, 0x48, 0x62, 0x56, 0x72, 0xa9, 0x7b, 0xec,
	0x5f, 0xd0, 0xbf, 0xa2, 0x9d, 0x5e, 0xfa, 0x77, 0xf4, 0x98, 0x63, 0x8f, 0x1d, 0xfb, 0xd8, 0x7f,
	0xa2, 0xc3, 0x0a, 0x1c, 0xb2, 0xf5, 0x8f, 0xe9, 0x25, 0xb7, 0xdd, 0xb7, 0x9f, 0xef, 0xf7, 0xbd,
	0x7d, 0xec, 0x13, 0x70, 0x97, 0x33, 0x8f, 0x85, 0xb5, 0x11, 0x4d, 0x68, 0xed, 0x87, 0x47, 0x74,
	0x32, 0x1d, 0xd3, 0x7a, 0x2d, 0x39, 0x99, 0xb2, 0x58, 0x9d, 0xf2, 0x28, 0x89, 0xf0, 0x8e, 0x00,
	0xd4, 0x39, 0xa0, 0x2e, 0x81, 0xd2, 0x5d, 0x2f, 0x8a, 0xbc, 0x09, 0xab, 0x09, 0xe4, 0xe8, 0xf8,
	0xfb, 0x5a, 0xe2, 0x07, 0x2c, 0x4e, 0x68, 0x30, 0x4d, 0x55, 0xa5, 0xb2, 0x0c, 0x8c, 0x8e, 0x39,
	0x4d, 0xfc, 0x28, 0x4c, 0xcf, 0xf7, 0xfe, 0x59, 0x87, 0x42, 0x33, 0x0a, 0x13, 0x16, 0x26, 0x1d,
	0x1a, 0x8f, 0xf1, 0x33, 0xc8, 0x72, 0x3a, 0x2b, 0x2a, 0x15, 0xe5, 0x7e, 0xa1, 0xfe, 0x85, 0x7a,
	0x41, 0x4e, 0x75, 0x05, 0x57, 0x09, 0x9d, 0x75, 0x32, 0x64, 0x2e, 0xc1, 0xdf, 0x42, 0xce, 0xe3,
	0x74, 0x3a, 0x2e, 0xae, 0x09, 0xed, 0xbd, 0x6b, 0xb5, 0xc6, 0x9c, 0xee, 0x64, 0x48, 0x2a, 0x2b,
	0xfd, 0xae, 0x40, 0x96, 0xd0, 0x19, 0xc6, 0xb0, 0x3e, 0xa6, 0xf1, 0x58, 0x94, 0xb0, 0x45, 0xc4,
	0x1a, 0xf7, 0x01, 0x8d, 0x7c, 0x8f, 0xc5, 0x89, 0x4b, 0x27, 0x5e, 0xc4, 0xfd, 0x64, 0x1c, 0x88,
	0x34, 0x37, 0x2e, 0x29, 0xb1, 0x25, 0x60, 0x6d, 0xc9, 0x92, 0xed, 0xd1, 0xfb, 0x01, 0xfc, 0x0d,
	0x40, 0xc0, 0x46, 0x3e, 0x75, 0xe7, 0x1d, 0x2e, 0x66, 0x85, 0x55, 0xf9, 0x42, 0xab, 0xde, 0x1c,
	0x73, 0x4e, 0xa6, 0x8c, 0xe4, 0x83, 0xe5, 0xb2, 0xf4, 0xdb, 0x1a, 0xe4, 0x44, 0xf9, 0x1f, 0xa6,
	0x5a, 0x0e, 0xa5, 0x21, 0x0d, 0xa3, 0xd0, 0x1f, 0xd2, 0x89, 0xff, 0x93, 0xf8, 0xf9, 0x56, 0xac,
	0xd3, 0xea, 0x1f, 0x5f, 0x68, 0x2d, 0x8a, 0x6c, 0x4a, 0xda, 0x77, 0x99, 0x6e, 0x0f, 0x2f, 0x3b,
	0xc2, 0x3a, 0x14, 0x02, 0xc6, 0xdf, 0x4c, 0x98, 0x9b, 0x70, 0xc6, 0x8a, 0xeb, 0x57, 0xd4, 0x2f,
	0x92, 0xf4, 0x04, 0xec, 0x70, 0xc6, 0x08, 0x04, 0xe7, 0xeb, 0xc6, 0x16, 0xc0, 0x88, 0xc5, 0x43,
	0xee, 0x4f, 0x93, 0x88, 0xef, 0xfd, 0x91, 0x85, 0xad, 0xc5, 0x13, 0xd0, 0xc3, 0x84, 0x9f, 0xe0,
	0x27, 0x2b, 0xed, 0x2b, 0xd4, 0x2b, 0xd7, 0xbd, 0x99, 0x45, 0x83, 0x11, 0x64, 0x7d, 0xee, 0x8b,
	0x9e, 0xe6, 0xc9, 0x7c, 0x89, 0x9b, 0xb0, 0x39, 0x4c, 0x31, 0xd1, 0x8e, 0x42, 0xfd, 0xcb, 0xab,
	0xac, 0x44, 0xee, 0xe5, 0x86, 0x2c, 0x95, 0xf8, 0x19, 0xe4, 0xcf, 0xc7, 0x47, 0x5c, 0xb8, 0x50,
	0x2f, 0xa9, 0xe9, 0xfc, 0xa8, 0xcb, 0xf9, 0x51, 0x9d, 0x25, 0x41, 0xde, 0xc1, 0xd8, 0x80, 0xcd,
	0xd8, 0xf7, 0x42, 0xc6, 0xe3, 0x62, 0xae, 0x92, 0xbd, 0x5f, 0xa8, 0xef, 0x5f, 0x9f, 0x7e, 0x20,
	0x04, 0x62, 0x4d, 0x96, 0xea, 0xd2, 0x3e, 0x6c, 0x2e, 0x20, 0x7c, 0x07, 0x3e, 0xe2, 0x74, 0xe6,
	0xce, 0x1d, 0xd2, 0xd7, 0xd5, 0xc9, 0x90, 0x4d, 0x4e, 0x67, 0x2d, 0x9a, 0xd0, 0x46, 0x0e, 0xb2,
	0xf1, 0x71, 0x50, 0x72, 0xa1, 0xb0, 0x62, 0x83, 0x77, 0x61, 0x23, 0x35, 0x12, 0x82, 0x3c, 0x59,
	0xec, 0xde, 0xbf, 0xd8, 0xda, 0xff, 0xb8, 0x58, 0xf5, 0xd7, 0x2c, 0xe4, 0xcf, 0x27, 0x00, 0x97,
	0x60, 0xb7, 0xa7, 0xb7, 0x4c, 0xcd, 0x75, 0x5e, 0xd9, 0xba, 0x7b, 0x60, 0x0d, 0x6c, 0xbd, 0x69,
	0xb6, 0x4d, 0xbd, 0x85, 0x32, 0xf8, 0x36, 0xdc, 0x5c, 0x39, 0x73, 0xf4, 0x97, 0x8e, 0x6b, 0x77,
	0x35, 0xd3, 0x42, 0x0a, 0xde, 0x81, 0xed, 0x95, 0xa3, 0xe7, 0x83, 0xbe, 0x85, 0xd6, 0x30, 0x86,
	0x1b, 0x2b, 0xc1, 0xe6, 0xe0, 0x10, 0x65, 0xa5, 0xd8, 0xcb, 0x5e, 0x17, 0xad, 0xe3, 0x3b, 0x70,
	0x6b, 0x25, 0x66, 0x93, 0xbe, 0xd3, 0x6f, 0x1c, 0xb4, 0x5d, 0xcd, 0x7a, 0x85, 0x72, 0x92, 0xc0,
	0x6e, 0xb5, 0xd1, 0x86, 0x94, 0xcd, 0x31, 0xdb, 0x6d, 0x84, 0x24, 0xf0, 0xb9, 0x6d, 0xa0, 0x8f,
	0x65, 0xb1, 0x65, 0x20, 0x2c, 0xc5, 0x06, 0x87, 0x06, 0xda, 0x91, 0x0c, 0xbf, 0xd3, 0x1b, 0x36,
	0xfa, 0x44, 0x0a, 0x6a, 0x87, 0x66, 0x1b, 0xdd, 0x94, 0xd4, 0x86, 0xd9, 0x46, 0xbb, 0x32, 0x38,
	0x4f, 0x73, 0x4b, 0x0a, 0xf6, 0x6c, 0xdd, 0x40, 0x15, 0x49, 0xdd, 0xb3, 0x9f, 0xa0, 0xcf, 0xfe,
	0x9b, 0xbb, 0x87, 0xf6, 0x24, 0xb0, 0x6f, 0x18, 0xe8, 0xf3, 0xea, 0xcf, 0x0a, 0x94, 0xaf, 0x1e,
	0x76, 0xfc, 0x10, 0x1e, 0x18, 0x44, 0xb3, 0x3b, 0x6e, 0x53, 0xb3, 0xfa, 0x96, 0xd9, 0xd4, 0xba,
	0xe6, 0x6b, 0xcd, 0x31, 0xfb, 0x96, 0xab, 0x75, 0x8d, 0x3e, 0x31, 0x9d, 0x4e, 0x4f, 0xfa, 0x4d,
	0x55, 0xa8, 0x5e, 0xaf, 0x20, 0x2d, 0x4b, 0xab, 0x3f, 0x7c, 0xf4, 0x14, 0x29, 0xd5, 0xaf, 0x61,
	0x5b, 0xfa, 0x16, 0xe0, 0x7b, 0xb0, 0x97, 0x5a, 0xf4, 0x74, 0xf2, 0xa2, 0xab, 0xbb, 0x0e, 0xd1,
	0x75, 0xd7, 0xea, 0x5b, 0xd2, 0xf3, 0xa9, 0x1e, 0xc0, 0xb6, 0xf4, 0x19, 0xc4, 0x15, 0xf8, 0xb4,
	0x65, 0x1a, 0xfa, 0xc0, 0xb9, 0xb4, 0xbe, 0x8b, 0x88, 0x46, 0x57, 0x7b, 0xa1, 0xd7, 0x1b, 0x6e,
	0xfd, 0xe9, 0x57, 0x48, 0x69, 0xb4, 0xff, 0x3c, 0x2d, 0x2b, 0x6f, 0x4f, 0xcb, 0xca, 0xdf, 0xa7,
	0x65, 0xe5, 0x97, 0xb3, 0x72, 0xe6, 0xed, 0x59, 0x39, 0xf3, 0xd7, 0x59, 0x39, 0xf3, 0xfa, 0x81,
	0xe7, 0x27, 0xe3, 0xe3, 0x23, 0x75, 0x18, 0x05, 0x35, 0x31, 0xab, 0xfb, 0x21, 0x4b, 0x66, 0x11,
	0x7f, 0xb3, 0xd8, 0x4d, 0xd8, 0xc8, 0x63, 0xbc, 0xf6, 0xa3, 0xf8, 0x47, 0x3e, 0xda, 0x10, 0x63,
	0xf2, 0xf8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x31, 0x19, 0x67, 0xa6, 0x07, 0x00, 0x00,
}

func (m *ContentHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Descriptor_ != nil {
		{
			size := m.Descriptor_.Size()
			i -= size
			if _, err := m.Descriptor_.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContentHash_Raw_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentHash_Raw_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Raw != nil {
		{
			size, err := m.Raw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ContentHash_Graph_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentHash_Graph_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Graph != nil {
		{
			size, err := m.Graph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ContentHash_Raw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentHash_Raw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentHash_Raw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MediaType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x18
	}
	if m.DigestAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DigestAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContentHash_Graph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentHash_Graph) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentHash_Graph) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MerkleTree != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MerkleTree))
		i--
		dAtA[i] = 0x20
	}
	if m.CanonicalizationAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CanonicalizationAlgorithm))
		i--
		dAtA[i] = 0x18
	}
	if m.DigestAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DigestAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContentEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Iri) > 0 {
		i -= len(m.Iri)
		copy(dAtA[i:], m.Iri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Iri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContentEntry_Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentEntry_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentEntry_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContentEntry_Content_RawData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentEntry_Content_RawData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RawData != nil {
		i -= len(m.RawData)
		copy(dAtA[i:], m.RawData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RawData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ContentEntry_SignerEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentEntry_SignerEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentEntry_SignerEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContentHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Descriptor_ != nil {
		n += m.Descriptor_.Size()
	}
	return n
}

func (m *ContentHash_Raw_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ContentHash_Graph_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Graph != nil {
		l = m.Graph.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ContentHash_Raw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DigestAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.DigestAlgorithm))
	}
	if m.MediaType != 0 {
		n += 1 + sovTypes(uint64(m.MediaType))
	}
	return n
}

func (m *ContentHash_Graph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DigestAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.DigestAlgorithm))
	}
	if m.CanonicalizationAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.CanonicalizationAlgorithm))
	}
	if m.MerkleTree != 0 {
		n += 1 + sovTypes(uint64(m.MerkleTree))
	}
	return n
}

func (m *ContentEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Iri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ContentEntry_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ContentEntry_Content_RawData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawData != nil {
		l = len(m.RawData)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ContentEntry_SignerEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContentHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContentHash_Raw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &ContentHash_Raw_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContentHash_Graph{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Descriptor_ = &ContentHash_Graph_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentHash_Raw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Raw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Raw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestAlgorithm", wireType)
			}
			m.DigestAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestAlgorithm |= DigestAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= MediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentHash_Graph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Graph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Graph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestAlgorithm", wireType)
			}
			m.DigestAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestAlgorithm |= DigestAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalizationAlgorithm", wireType)
			}
			m.CanonicalizationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanonicalizationAlgorithm |= GraphCanonicalizationAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTree", wireType)
			}
			m.MerkleTree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerkleTree |= GraphMerkleTree(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &ContentHash{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &ContentEntry_Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, &ContentEntry_SignerEntry{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentEntry_Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Sum = &ContentEntry_Content_RawData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentEntry_SignerEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
