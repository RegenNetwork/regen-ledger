#+TITLE: Geo Module
#+BEGIN_SRC go :tangle types.go :exports none
  /* GENERATED FROM README.org
     DO NOT EDIT THIS FILE DIRECTLY!!!!! */

  package geo

  import (
    sdk "github.com/cosmos/cosmos-sdk/types"
  )
#+END_SRC
#+BEGIN_SRC sql :tangle geo.sql :exports none
  /* GENERATED FROM README.org
     DO NOT EDIT THIS FILE DIRECTLY!!!!! */

#+END_SRC
* Overview
  The ~geo~ module provides an efficient storage space for on-chain geographic features that can be referenced by other modules.
* Motivation and Rationale
  While geographic features could be stored as literals everywhere they are needed, precise measurements of real world objects like a polygon that describes an irregularly shaped field can become quite large because of the number of points required to be precise. Having a single storage space for these objects reduces overall storage requirements. Geographic features are also referenced by hash on-chain which provides for content addressability and reduces duplication.
* Transaction Messages and Types
** TODO Store geographic feature on-chain
#+BEGIN_SRC go :tangle types.go
  type MsgStoreGeo struct {
    Data Geometry `json:"data"`
    Signer sdk.AccAddress `json:"signer"`
  }

  type FeatureType int

  const (
    Point FeatureType = 0
    LineString
    Polygon
    MultiPoint
    MultiLineString
    MultiPolygon
  )

  type Geometry struct {
    Type FeatureType `json:"type"`
    // EWKB representation of the geo feature. Must be in the WGS84 coordinate
    // system and represent a Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon
    EWKB []byte `json:"ewkb,omitempty"`
  }
#+END_SRC

** Identifiers
*** TODO ~Geometry~ URI's
    Stored ~Geometry~'s are referenced by the URI created by the bech32 encoding of the Blake2b 256-bit hash of the EWKB representation of the geographic feature prefixed with ~xrn://<block-number>/geo/~.
** Indexing and Queries
   Geographic features are indexed by both the Postgis and RDF indexers.
*** TODO Postgis
    ~Geometry~'s will be indexed in the table ~geo~ defined as:
#+BEGIN_SRC sql :tangle geo.sql
  CREATE TABLE geo (
    uri text NOT NULL PRIMARY KEY,
    tx bytea NOT NULL REFERENCES tx,
    -- Both the Postgis geography and geometry representations are stored
    geog geography NOT NULL,
    geom geometry NOT NULL
  );

  CREATE INDEX geo_geom_gist ON geo USING GIST ( geom );
#+END_SRC
*** TODO RDF
    ~Geometry~'s will be indexed in the RDF store as below and available in both the default graph and the named graph identified by the ~Geometry~ URI.
#+BEGIN_SRC turtle
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX sf: <http://www.opengis.net/ont/sf#>

<xrn://1234/geo/sghj38sdgh358>
  a sf:Point ;
  geo:asWKT "Point(-83.38 33.95)"^^<geo:wktLiteral> .
#+END_SRC
