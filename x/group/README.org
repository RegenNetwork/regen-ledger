#+TITLE: Group Module
*STATUS: Approved* (out of sync with implementation)

#+BEGIN_SRC go :tangle types.go :exports none
  /* GENERATED FROM README.org
     DO NOT EDIT THIS FILE DIRECTLY!!!!! */
  package group

  import (
    sdk "github.com/cosmos/cosmos-sdk/types"
  )
#+END_SRC

#+BEGIN_SRC sql :tangle group.sql :exports none
  /* GENERATED FROM README.org
     DO NOT EDIT THIS FILE DIRECTLY!!!!! */
#+END_SRC

* Overview

  A ~Group~ is an aggregation of Regen Ledger addresses - which themselves can be individual keys, other groups, or contracts - each with an associated voting ~Weight~ and a ~DecisionThreshold~. This allows for specifying on-chain organizations as well as arbitrary groups of keys that have a governance structure that includes simple majority, super-majority, minority approval, and weighted ownership. In the future, it may be extended to support more sophisticated multi-party authorization schemes.

* Motivation
  There are a number of scenarios where we want to model a group or organization concept on the blockchain. Here are some hypothesized groups that this module should serve:

** Regen Consortium and its member organizations
   The Regen Consortium is intended to be the group of organizations that govern the Regen Ledger blockchain. They get to choose the validator set, decide on major upgrades to the blockchain as well as a number of parameters like transaction fees. Each consortium member itself must be an organization that likely has its own decision making policy.

** Protocol and Contract Curators
   Ecological state protocols (ESPs) and contracts (ECs) have been theorized to specify some organization or group that "curates" them. Curation has a number of different benefits and responsibilities. ESP curators have the responsibility of upgrading the protocols over time and may also receive curator fees when ESPs are run. EC curators may also receive a fee and/or be required to intervene to arbitrate terms of a contract.

** Verifiers
   It is hypothesized that verifiers may likely be multi-party organizations that have their own governance protocol for approving verification claims.

* Transaction Messages and Types
** Basic Types
#+BEGIN_SRC go :tangle types.go
// A group can be used to abstract over users and groups.
// It could be used to group individuals into a group or several groups/users into a larger group.
// It could be used by a single user to manage multiple devices and setup a multisig policy.
type Group struct {
  // The members of the group and their associated weight
	Members         []Member `json:"addresses,omitempty"`
  // Specifies the number of votes that must be accumulated in order for a decision to be made by the group.
  // A member gets as many votes as is indicated by their Weight field.
  // A big integer is used here to avoid any potential vulnerabilities from overflow errors
  // where large weight and threshold values are used.
	DecisionThreshold sdk.Int `json:"decision_threshold,omitempty"`
  // TODO maybe make this something more specific to a domain name or a claim on identity? or Memo leave it generic
	Memo              string           `json:"memo,omitempty"`
}

// A member specifies a address and a weight for a group member
type Member struct {
  // The address of a group member. Can be another group or a contract
  Address sdk.AccAddress `json:"address"`
  // The integral weight of this member with respect to other members and the decision threshold
  Weight sdk.Int `json:"weight,omitempty"`
}
#+END_SRC
** ~MsgCreateAgent~

   /[[./features/create.feature][Test spec]]/
   
#+BEGIN_SRC go :tangle types.go
// Creates a group on the blockchain
// Should return a tag "group.id" with the bech32 address of the group
type MsgCreateGroup struct {
	Data   Group      `json:"data"`
	Signer sdk.AccAddress `json:"signer"`
}
#+END_SRC

*** TODO transaction fee

* Identifiers
  Groups implement the ~Account~ interface and thus have an ~sdk.AccAddress~. Internally a group ID is an ~uint64~ which is assigned on an auto-increment basis. The ~AccAddress~ for an group is made by concatenating the prefix ~G~ (as ~[]byte~) and the [[https://golang.org/pkg/encoding/binary/#PutUvarint][varint]] encoding of the ~uint64~ account ID. The textual representation of a group account is obtained by taking the bech32 encoding of this ~AccAddress~ with the prefix ~xrn:~ which also is a valid URI.

* Indexing and Queries
** ~get~
   
   /[[./features/get.feature][Test spec]]/

   The ~get~ query command should take the group address as a single parameter retrieve the current ~Group~ struct (as JSON) associated with that address
** Postgresql
   Groups and their members should be indexed to the tables below which should allow members to look up any groups they are directly or transitively part of:

#+BEGIN_SRC sql :tangle group.sql
  CREATE TABLE group (
    address text NOT NULL PRIMARY KEY,
    threshold NUMERIC NOT NULL 
  );
  
  CREATE TABLE group_member (
    group_address text NOT NULL REFERENCES group,
    member_address text NOT NULL,
    weight NUMERIC NOT NULL
  );
#+END_SRC

* Rationale
  Groups are designed with a simple weight/threshold voting mechanism. Other voting mechanisms could be added to the ~Group~ type in the future, but for now this simple mechanism is theorized to be sufficient for most of our immediate use cases. To begin with ~DecisionThreshold~ allows for any sort of majority of super-majority voting system where all members have equal weight. It also allows for minority voting systems where say we are managing our own keys and have several devices but only need say two at a time to approve a transaction. The addition of the ~Weight~ parameter for each member allows for managing voting scenarios where weight is distributed unequally - say in ownership shares of a company. So if persons A, B, and C each had 1000 shares and person D had 2000 shares, we could set their ~Weight~'s to their share count and ~DecisionThreshold~ to 2501 for simply majority approval. Many other governance mechanisms that are more complex could actually be handled by nesting groups with different responsibilities. For instance say we had a reporter/approver approval mechanism for an ESP report. We could have a group of reporters in a group with equal weight and ~DecisionThreshold~ 1, and a similar group for approvers, and then join them into a reporter/approver group where the reporter group and approver group are each members with ~Weight~ 1 and ~DecisionThreshold~ 2. This arrangements specifies that we need one reporter and one approver to sign off on a report. While there are scenarios that definitely can't be handled with this type of governance definition, there are a surprisingly large number that can and so our hypothesis is that this is sufficient to start until more scenarios are encountered.
