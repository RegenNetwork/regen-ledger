#+TITLE: Schema

* Overview

* Motivation and Rationale
  
* Transaction Messages and Types
  
** Supported Property Types
#+BEGIN_SRC go :tangle types.go
  type PropertyType int

  const (
    OBJECT PropertyType = 0
	  ENUM
    STRING
    INTEGER
    DECIMAL
    BOOL
    DOUBLE
    DATETIME
    DATE
    TIME
    DURATION
    BASE64
    ANYURI
    WKT
  )
#+END_SRC

** Class, Property and Label Integer ID's
   Classes, properties and labels receive an auto-incremented integer ID. This ID is used in references in class and property definitions and can also used for saving storage space in a binary RDF serialization format.

#+BEGIN_SRC go :tangle types.go
  type PropertyID int64

  type ClassID int64

  type LabelID int64
#+END_SRC

** Define Property
   
#+BEGIN_SRC go :tangle types.go
  type ActionDefineProperty struct {
    Agent agent.AgentID `json:"agent"`
    Name string `json:"name"`
    Many bool `json:"many,omitempty"`
    Type PropertyType `json:"type,omitempty"`
    Class ClassID `json:"class,omitempty"`
    SuperProperties []PropertyID `json:"super_properties,omitempty"`
    SubProperties []PropertyID `json:"sub,omitempty"`
	  EnumLabels []LabelID `json:"enum_labels,omitempty"`
    IntegerMin *big.Int `json:"integer_min,omitempty"`
    IntegerMax *big.Int `json:"integer_max,omitempty"`
    DoubleMin *double `json:"double_min,omitempty"`
    DoubleMax *double `json:"double_max,omitempty"`
    Label []LangString `json:"label,omitempty"`
    Comment []LangString `json:"label,omitempty"`
  }

#+END_SRC

** Define Class
   
#+BEGIN_SRC go :tangle types.go
   
  type ActionDefineClass struct {
    Agent agent.AgentID `json:"agent"`
    Name string `json:"name"`
    Properties []PropertyRef `json:"properties,omitempty"`
	  SuperClasses []ClassID `json:"super_classes,omitempty"`
	  SubClasses []ClassID `json:"sub_classes,omitempty"`
    Label []LangString `json:"label,omitempty"`
    Comment []LangString `json:"label,omitempty"`
  }

  type PropertyRef struct {
    Property PropertyID `json:"property"`
    Required bool `json:"required,omitempty"`
  }

#+END_SRC

** Define Label
   Labels are IRI's whose sole purpose is to serve as an enum value.
   
#+BEGIN_SRC go :tangle types.go
   
  type ActionDefineLabel struct {
    Agent agent.AgentID `json:"agent"`
    Name string `json:"name"`
    Label []LangString `json:"label,omitempty"`
    Comment []LangString `json:"label,omitempty"`
  }

#+END_SRC
** Human-readable labels and descriptions

   Human-readable and localized labels and descriptions can be defined using the ~Label~ and ~Comment~ fields of property and class definitions which map to ~rdfs:label~ and ~rdfs:comment~ properties respectively. Their values like in RDF Schema are an array of ~LangString~'s to support localization.

#+BEGIN_SRC go :tangle types.go
  type LangString struct {
    Text String `json:"text,omitempty"`
    Language String `json:"lang,omitempty"`
  }
#+END_SRC
** TODO bulk insertions
** TODO updates to classes (adding optional properties), human-readable text?

* Identifiers
  Properties and classes are identified by the URI formed by taking the agent URI and appending ~s/<name>~.
